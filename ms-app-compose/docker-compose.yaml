# docker-compose up --detach

version: '2.3'
services:
  mysql:
    restart: always
    image: mariadb:10.3
    container_name: mariadb
    ports:
      - "3306:3306"
    volumes:
      - ./store/:/var/lib/mysql
    mem_limit: 256m
    networks:
      - ms_app_network
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=local
      - MYSQL_USER=root
      - MYSQL_PASSWORD=123456
      - PMA_ARBITRARY=1
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - PMA_USER=root
      - PMA_PASSWORD=123456
  
  postgres:
    image: postgres:9.6
    container_name: kong-database
    environment:
        POSTGRES_USER: kong
        POSTGRES_DB: kong
        POSTGRES_PASSWORD: kong
    ports:
        - "1000:5432"
    volumes:
        - ./data/kong:/var/lib/postgresql/data
    networks:
        - ms_app_network
  
  # kong-migrations:
  #   image: kong:latest
  #   container_name: kong-migrations
  #   restart: on-failure
  #   depends_on:
  #       - postgres
  #   environment:
  #       KONG_DATABASE: postgres
  #       KONG_PG_HOST: postgres
  #       KONG_PG_USER: kong
  #       KONG_PG_PASSWORD: kong
  #       KONG_CASSANDRA_CONTACT_POINTS: kong-database
  #   entrypoint: sh -c "sleep 100 && kong migrations bootstrap --vv"
  #   networks:
  #       - ms_app_network
  
  # konga-prepare:
  #   image: pantsel/konga
  #   container_name: konga-prepare
  #   command: "-c prepare -a postgres -u postgresql://kong:kong@postgres:5432/konga"
  #   networks:
  #       - ms_app_network
  #   restart: on-failure
  #   depends_on:
  #       - postgres

  kong:
    image: kong:latest
    container_name: kong
    restart: on-failure
    networks:
        - ms_app_network
    environment:
        KONG_DATABASE: postgres
        KONG_PG_HOST: postgres
        KONG_PG_USER: kong
        KONG_PG_PASSWORD: kong
        KONG_CASSANDRA_CONTACT_POINTS: kong-database
        KONG_PROXY_ACCESS_LOG: /dev/stdout
        KONG_ADMIN_ACCESS_LOG: /dev/stdout
        KONG_PROXY_ERROR_LOG: /dev/stderr
        KONG_ADMIN_ERROR_LOG: /dev/stderr
        KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
        - "1001:8000"
        - "1002:8443"
        - "1003:8001"
        - "1004:8444"
  
 

# Account: admin/nghiandd.84@gmail.com/Test@123456
  konga:
    image: pantsel/konga
    container_name: konga
    restart: on-failure
    depends_on:
        - postgres
    networks:
        - ms_app_network
    environment:
        DB_ADAPTER: postgres
        DB_HOST: postgres
        DB_PORT: 5432
        DB_USER: kong
        DB_PASSWORD: kong
        DB_DATABASE: konga
        KONGA_HOOK_TIMEOUT: 120000
        NODE_ENV: production  
    ports:
        - "1005:1337"

  mysql-admin:
    restart: always
    image: phpmyadmin/phpmyadmin
    container_name: mariadb-phpmyadmin
    ports:
      - "8001:80"
    mem_limit: 128m
    networks:
      - ms_app_network
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: 123456

  dn-ms-user:
    restart: always
    image: dn-ms-user
    container_name: dn-ms-user
    volumes:
      - ./data/logs/user:/app/logs
    ports:
      - "17001:18001"
    mem_limit: 128m
    networks:
      - ms_app_network
    depends_on:
      - mysql
      - redis-server
      - rabbitmq
    env_file:
      - share.env
    environment:
      OTEL_SERVICE_NAME: ms-user
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://tempo:14268/api/traces
      LOG_FILE_NAME: /app/logs/app.log
  
  dn-ms-notification:
    restart: always
    image: dn-ms-notification
    container_name: dn-ms-notification
    volumes:
      - ./data/logs/notification:/app/logs
    
    ports:
      - "16101:16001"
      - "17003:18003"
    mem_limit: 128m
    networks:
      - ms_app_network
    depends_on:
      - mysql
      - redis-server
      - rabbitmq
    env_file:
      - share.env
    environment:
      OTEL_SERVICE_NAME: ms-notification
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://tempo:14268/api/traces
      LOG_FILE_NAME: /app/logs/app.log

  redis-server:
    restart: always
    image: redis:4.0
    container_name: redis-server
    command: /bin/bash -c 'redis-server --appendonly yes'
    sysctls:
      - net.core.somaxconn=65535
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data
    mem_limit: 64m
    networks:
      - ms_app_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - ./rabbitmq/:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - ms_app_network


  tempo:
    image: grafana/tempo:1.0.1
    container_name: tempo
    networks:
      - ms_app_network
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./etc/tempo-local.yaml:/etc/tempo.yaml
      - ./data/tempo-data:/tmp/tempo
    ports:
      - "14268"      # jaeger ingest, Jaeger - Thrift HTTP
      - "14250"      # Jaeger - GRPC
      - "55680"      # OpenTelemetry
      - "3100"       # tempo
      - "6831/udp"   # Jaeger - Thrift Compact
      - "6832/udp"   # Jaeger - Thrift Binary
  
  loki:
    image: grafana/loki:2.2.1
    container_name: loki
    networks:
      - ms_app_network
    command: -config.file=/etc/loki/loki-local.yaml
    ports:
      - "3101:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    volumes:
      - ./etc/loki-local.yaml:/etc/loki/loki-local.yaml
      - ./data/loki-data:/tmp/loki

  promtail:
    image: grafana/promtail:2.2.1
    container_name: promtail
    networks:
      - ms_app_network
    command: -config.file=/etc/promtail/promtail-local.yaml
    volumes:
      - ./etc/promtail-local.yaml:/etc/promtail/promtail-local.yaml
      - ./data/logs:/app/logs
    depends_on:
      - dn-ms-user
      - dn-ms-notification
      - loki

  volume_exporter:
    image: mnadeem/volume_exporter
    container_name: volume_exporter
    networks:
      - ms_app_network
    command: ["--volume-dir=tempo:/tmp/tempo", "--volume-dir=logs:/app/logs", "--volume-dir=loki:/tmp/loki"]
    volumes:
      - ./data/logs:/app/logs
      - ./data/tempo-data:/tmp/tempo
      - ./data/loki-data:/tmp/loki
    ports:
      - 9889:9888

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - ms_app_network
    volumes:
      - ./etc/prometheus.yaml:/etc/prometheus.yaml
    entrypoint:
      - /bin/prometheus
      - --config.file=/etc/prometheus.yaml
    ports:
      - "9090:9090"
    depends_on:
      - dn-ms-notification
      - dn-ms-user

  grafana:
    image: grafana/grafana:8.1.0-ubuntu
    container_name: grafana
    networks:
      - ms_app_network
    volumes:
      - ./data/grafana-data/datasources:/etc/grafana/provisioning/datasources
      - ./data/grafana-data/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./data/grafana-data/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki
      - volume_exporter


volumes:
  mysql:
    driver: local
  redis:
    driver: local
  grafana: 
    driver: local
  

networks:
  ms_app_network:
    driver: bridge
